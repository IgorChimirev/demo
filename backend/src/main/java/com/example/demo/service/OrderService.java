package com.example.demo.service;

import com.example.demo.TelegramBot.TelegramBotService;
import com.example.demo.dto.OrderRequest;
import com.example.demo.entity.Order;
import com.example.demo.entity.Executor;
import com.example.demo.repository.OrderRepository;
import com.example.demo.repository.ExecutorRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderService {
    private final OrderRepository orderRepository;
    private final TelegramBotService telegramBotService;
    private final ExecutorRepository executorRepository;
    private final ChatService chatService;

    public Order createOrder(OrderRequest request) {
        log.info("üîÑ Creating order for user: {}", request.getTelegramUserId());

        Order order = new Order();
        order.setTelegramUserId(request.getTelegramUserId());
        order.setTelegramUsername(request.getTelegramUsername());
        order.setUniversity(request.getUniversity());
        order.setSubject(request.getSubject());
        order.setCategory(request.getCategory());
        order.setDescription(request.getDescription());
        order.setPrice(request.getPrice());
        order.setStatus("–≤ –ø–æ–∏—Å–∫–µ");
        order.setCreatedAt(LocalDateTime.now());

        log.debug("Order entity prepared - University: {}, Subject: {}, Category: {}",
                order.getUniversity(), order.getSubject(), order.getCategory());

        try {
            Order savedOrder = orderRepository.save(order);
            log.info("Order saved to database with ID: {}", savedOrder.getId());

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            notifyExecutorsAboutNewOrderAsync(savedOrder);
            return savedOrder;
        } catch (Exception e) {
            log.error("Error saving order to database: {}", e.getMessage(), e);
            throw e;
        }
    }

    @Async
    public CompletableFuture<Void> notifyExecutorsAboutNewOrderAsync(Order order) {
        return CompletableFuture.runAsync(() -> {
            notifyExecutorsAboutNewOrder(order);
        });
    }

    private void notifyExecutorsAboutNewOrder(Order order) {
        try {
            List<Executor> executors = executorRepository.findByCategory(order.getCategory());
            log.debug("Found {} executors for category: {}", executors.size(), order.getCategory());

            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ telegramUserId
            Map<Long, Executor> uniqueExecutors = executors.stream()
                    .collect(Collectors.toMap(
                            Executor::getTelegramUserId,
                            Function.identity(),
                            (existing, replacement) -> existing // –ü—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –±–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    ));

            log.debug("After deduplication: {} unique executors", uniqueExecutors.size());

            for (Executor executor : uniqueExecutors.values()) {
                try {
                    String availableOrdersLink = generateAvailableOrdersLink();

                    telegramBotService.sendAcceptOrderMessage(
                            executor.getTelegramUserId(),
                            order.getId(),
                            "üéØ –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!\n\n" +
                                    "üìö –ü—Ä–µ–¥–º–µ—Ç: " + order.getSubject() + "\n" +
                                    "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + order.getCategory() + "\n" +
                                    "üè´ –í–£–ó: " + order.getUniversity() + "\n" +
                                    "üìù –û–ø–∏—Å–∞–Ω–∏–µ: " + order.getDescription() + "\n" +
                                    "üí∞ –¶–µ–Ω–∞: " + order.getPrice() + "\n"+
                                    "üíº [–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∑–∞–∫–∞–∑–∞–º](" + availableOrdersLink + ")"
                    );

                    log.debug("Notification sent to executor: {}", executor.getTelegramUserId());
                } catch (Exception e) {
                    log.warn("Failed to send notification to executor {}: {}",
                            executor.getTelegramUserId(), e.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("Error notifying executors: {}", e.getMessage(), e);
        }
    }

    private String generateAvailableOrdersLink() {
        return "https://t.me/studentsbotmainbot/student?startapp=available_orders";

    }

    public List<Order> getOrdersByUser(Long telegramUserId) {
        return orderRepository.findByTelegramUserIdOrderByCreatedAtDesc(telegramUserId);
    }

    public Order acceptOrder(Long orderId, Long executorId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found with id: " + orderId));

        order.setStatus("–ø—Ä–∏–Ω—è—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º");
        order.setExecutorId(executorId);

        CompletableFuture.runAsync(() -> {
            try {

                chatService.createChatSession(order.getTelegramUserId(), executorId,order.getId());

                log.info("Chat session created for order {} between {} and {}",
                        orderId, order.getTelegramUserId(), executorId);


                CompletableFuture.allOf(
                        telegramBotService.sendMessageAsync(
                                order.getTelegramUserId(),
                                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n" +
                                        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ. " +
                                        "–î–ª—è –æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º @" +
                                        telegramBotService.getBotUsername() + "\n\n" +
                                        "–ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:\n" +
                                        "/sessions - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤\n" +
                                        "/close_chat - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
                        ),
                        telegramBotService.sendMessageAsync(
                                executorId,
                                "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!\n\n" +
                                        "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º @" +
                                        telegramBotService.getBotUsername() + "\n\n" +
                                        "–ö–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞:\n" +
                                        "/sessions - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤\n" +
                                        "/close_chat - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç"
                        )
                ).exceptionally(ex -> {
                    log.warn("Error sending acceptance notifications: {}", ex.getMessage());
                    return null;
                });

            } catch (Exception e) {
                log.error("Error creating chat session for order {}: {}", orderId, e.getMessage(), e);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                telegramBotService.sendMessageAsync(
                        executorId,
                        "‚ö†Ô∏è –ß–∞—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. " +
                                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
                );
            }
        });

        Order savedOrder = orderRepository.save(order);
        log.info("Order {} accepted by executor {}", orderId, executorId);
        return savedOrder;
    }

    public List<Order> getActiveOrdersByUser(Long telegramUserId) {
        return orderRepository.findByTelegramUserIdAndStatus(telegramUserId, "–≤ –ø–æ–∏—Å–∫–µ");
    }

    public List<Order> getCompletedOrdersByUser(Long telegramUserId) {
        return orderRepository.findByTelegramUserIdAndStatus(telegramUserId, "–∑–∞–≤–µ—Ä—à–µ–Ω");
    }

    public List<Order> getAllActiveOrders() {
        return orderRepository.findByStatus("–≤ –ø–æ–∏—Å–∫–µ");
    }

    public Order updateOrderStatus(Long orderId, String status) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found with id: " + orderId));

        String oldStatus = order.getStatus();
        order.setStatus(status);

        if ("–∑–∞–≤–µ—Ä—à–µ–Ω".equals(status)) {
            order.setCompletedAt(LocalDateTime.now());

            CompletableFuture.runAsync(() -> {
                String completionMessage = "üèÅ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞!";

                if (order.getExecutorId() != null) {
                    telegramBotService.sendMessageAsync(order.getExecutorId(), completionMessage);
                }
                telegramBotService.sendMessageAsync(order.getTelegramUserId(), completionMessage);
            });
        }

        Order savedOrder = orderRepository.save(order);
        log.info("Order {} status changed from {} to {}", orderId, oldStatus, status);
        return savedOrder;
    }

    public String getAmountByOrderId(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("Order not found with id: " + orderId));
        return order.getPrice();
    }

    public List<Order> getActiveOrdersByCategory(String category, Long telegramUserId) {
        log.debug("Getting active orders by category: {} for user: {}", category, telegramUserId);

        List<Order> orders = orderRepository.findByTelegramUserIdNotAndStatusAndCategory(
                telegramUserId, "–≤ –ø–æ–∏—Å–∫–µ", category);

        log.debug("Found {} orders for category: {}", orders.size(), category);
        return orders;
    }

    public void deleteOrder(Long orderId) {
        log.info("Deleting order with ID: {}", orderId);

        try {
            boolean exists = orderRepository.existsById(orderId);
            if (!exists) {
                log.warn("Order not found with id: {}", orderId);
                throw new RuntimeException("Order not found with id: " + orderId);
            }

            orderRepository.deleteById(orderId);
            log.info("Order successfully deleted: {}", orderId);

        } catch (Exception e) {
            log.error("Error during order deletion {}: {}", orderId, e.getMessage(), e);
            throw e;
        }
    }
}