package com.example.demo.service;

import com.example.demo.entity.ChatSession;
import com.example.demo.TelegramBot.TelegramBotService;
import com.example.demo.repository.ChatSessionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;

@Slf4j
@Service
@RequiredArgsConstructor
public class ChatService {
    private final ChatSessionRepository chatSessionRepository;
    private final TelegramBotService telegramBotService;
    private final RedisTemplate<String, Object> redisTemplate;

    private static final String USER_CURRENT_SESSION_KEY = "user:current:session:";
    private static final String USER_ACTIVE_SESSIONS_KEY = "user:active:sessions:";

    public void sendMessage(String sessionId, Long fromUserId, String message, String fileId, String fileType, String caption) {
        if (fileId != null && !fileId.trim().isEmpty()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
            sendFile(sessionId, fromUserId, fileId, fileType,
                    (message != null && !message.trim().isEmpty()) ? message : caption);
        } else if (message != null && !message.trim().isEmpty()) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            sendTextMessage(sessionId, fromUserId, message);
        }
    }

    public void sendFile(String sessionId, Long fromUserId, String fileId, String fileType, String caption) {
        log.debug("Sending file in session {} from user {}: {} (type: {})",
                sessionId, fromUserId, fileId, fileType);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!"ACTIVE".equals(session.getStatus())) {
                throw new RuntimeException("Chat session is not active. Current status: " + session.getStatus());
            }

            if (!isUserInSession(session, fromUserId)) {
                throw new RuntimeException("User " + fromUserId + " is not a participant of session " + sessionId);
            }

            Long toUserId = session.getOtherUserId(fromUserId);
            String fromTempId = session.getUserTempId(fromUserId);
            String toTempId = session.getUserTempId(toUserId);

            if (toUserId == null) {
                throw new RuntimeException("Could not find recipient user in session");
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            String messagePrefix = getFileTypePrefix(fileType) + " –æ—Ç " + fromTempId;
            if (caption != null && !caption.trim().isEmpty()) {
                messagePrefix += ":\n" + caption;
            }

            telegramBotService.sendFileAsync(toUserId, fileId, fileType, messagePrefix);

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            String confirmationMessage = "‚úÖ " + getFileTypeConfirmation(fileType) + " –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Å " + toTempId;
            telegramBotService.sendMessageAsync(fromUserId, confirmationMessage);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            session.setLastActivity(LocalDateTime.now());
            chatSessionRepository.save(session);

            log.info("File delivered successfully in session {} from {} to {}",
                    sessionId, fromUserId, toUserId);

        } catch (Exception e) {
            log.error("Error sending file in session {} from user {}: {}",
                    sessionId, fromUserId, e.getMessage(), e);
            throw new RuntimeException("Failed to send file: " + e.getMessage());
        }
    }

    private String getFileTypePrefix(String fileType) {
        switch (fileType) {
            case "photo": return "üì∑ –§–æ—Ç–æ";
            case "document": return "üìé –§–∞–π–ª";
            case "voice": return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
            case "video": return "üé• –í–∏–¥–µ–æ";
            case "audio": return "üéµ –ê—É–¥–∏–æ";
            default: return "üìÅ –§–∞–π–ª";
        }
    }

    private String getFileTypeConfirmation(String fileType) {
        switch (fileType) {
            case "photo": return "–§–æ—Ç–æ";
            case "document": return "–§–∞–π–ª";
            case "voice": return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ";
            case "video": return "–í–∏–¥–µ–æ";
            case "audio": return "–ê—É–¥–∏–æ";
            default: return "–§–∞–π–ª";
        }
    }

    private void sendTextMessage(String sessionId, Long fromUserId, String message) {
        log.debug("Sending message in session {} from user {}: {}", sessionId, fromUserId, message);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!"ACTIVE".equals(session.getStatus())) {
                throw new RuntimeException("Chat session is not active. Current status: " + session.getStatus());
            }

            if (!isUserInSession(session, fromUserId)) {
                throw new RuntimeException("User " + fromUserId + " is not a participant of session " + sessionId);
            }

            Long toUserId = session.getOtherUserId(fromUserId);
            String fromTempId = session.getUserTempId(fromUserId);
            String toTempId = session.getUserTempId(toUserId);

            if (toUserId == null) {
                throw new RuntimeException("Could not find recipient user in session");
            }

            String messageToRecipient = "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + fromTempId + ":\n" + message;
            telegramBotService.sendMessageAsync(toUserId, messageToRecipient);

            String confirmationMessage = "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Å " + toTempId;
            telegramBotService.sendMessageAsync(fromUserId, confirmationMessage);

            session.setLastActivity(LocalDateTime.now());
            chatSessionRepository.save(session);

            log.info("Message delivered successfully in session {} from {} to {}",
                    sessionId, fromUserId, toUserId);

        } catch (Exception e) {
            log.error("Error sending message in session {} from user {}: {}",
                    sessionId, fromUserId, e.getMessage(), e);
            throw new RuntimeException("Failed to send message: " + e.getMessage());
        }
    }

    public ChatSession createChatSession(Long user1Id, Long user2Id, Long orderId) {
        log.info("Creating chat session between user1: {} and user2: {}", user1Id, user2Id);

        try {
            Optional<ChatSession> existingSession = findActiveSessionBetweenUsers(user1Id, user2Id, orderId);
            if (existingSession.isPresent()) {
                log.info("Active session already exists: {}", existingSession.get().getSessionId());
                return existingSession.get();
            }

            ChatSession session = new ChatSession();
            session.setSessionId(generateSessionId());
            session.setUser1Id(user1Id);
            session.setUser2Id(user2Id);
            session.setOrderId(orderId);
            session.setUser1TempId(generateTempId("user"));
            session.setUser2TempId(generateTempId("user"));
            session.setStatus("ACTIVE");
            session.setCloseApprovals(new HashSet<>());
            session.setCompletionApprovals(new HashSet<>());
            session.setPaid(false);

            chatSessionRepository.save(session);
            log.info("Chat session created successfully: {}", session.getSessionId());

            setUserCurrentSession(user1Id, session.getSessionId());
            setUserCurrentSession(user2Id, session.getSessionId());

            addToUserActiveSessions(user1Id, session.getSessionId());
            addToUserActiveSessions(user2Id, session.getSessionId());

            sendWelcomeMessages(session);

            return session;

        } catch (Exception e) {
            log.error("Error creating chat session between {} and {}: {}", user1Id, user2Id, e.getMessage(), e);
            throw new RuntimeException("Failed to create chat session: " + e.getMessage());
        }
    }

    public boolean handlePayCommand(String sessionId, Long userId, Long orderId) {
        log.info("Processing pay command for session {} by user {}", sessionId, userId);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!isUserInSession(session, userId)) {
                throw new RuntimeException("User is not a participant of this session");
            }

            if (session.getPaid()) {
                log.info("Session {} already paid", sessionId);
                return false;
            }

            session.setPaid(true);
            session.setLastActivity(LocalDateTime.now());
            chatSessionRepository.save(session);

            String payerTempId = session.getUserTempId(userId);
            String otherUserTempId = session.getOtherUserTempId(userId);
            Long otherUserId = session.getOtherUserId(userId);

            String payerMessage = "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.";
            String otherUserMessage = "‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ " + payerTempId + " –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É.\n\n" +
                    "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∫–æ–º–∞–Ω–¥–æ–π:\n" +
                    "/confirm_completion\n\n" +
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π, –∏ —Ç–æ–≥–¥–∞ —á–∞—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç—å.";

            telegramBotService.sendMessageAsync(userId, payerMessage);
            telegramBotService.sendMessageAsync(otherUserId, otherUserMessage);

            log.info("Payment confirmed for session {} by user {}", sessionId, userId);
            return true;

        } catch (Exception e) {
            log.error("Error processing pay command for session {} by user {}: {}", sessionId, userId, e.getMessage(), e);
            throw new RuntimeException("Failed to process payment: " + e.getMessage());
        }
    }

    public boolean handleConfirmCompletion(String sessionId, Long userId) {
        log.info("Processing completion confirmation for session {} by user {}", sessionId, userId);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!isUserInSession(session, userId)) {
                throw new RuntimeException("User is not a participant of this session");
            }

            if (!session.getPaid()) {
                String errorMessage = "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞.\n\n" +
                        "–°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay";
                telegramBotService.sendMessageAsync(userId, errorMessage);
                return false;
            }

            if (session.getCompletionApprovals() == null) {
                session.setCompletionApprovals(new HashSet<>());
            }

            if (!session.getCompletionApprovals().contains(userId)) {
                session.getCompletionApprovals().add(userId);
            }

            session.setLastActivity(LocalDateTime.now());
            chatSessionRepository.save(session);

            if (session.getCompletionApprovals().size() >= 2) {
                String completionMessage = "‚úÖ –û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∑–∞–∫–∞–∑–∞. –¢–µ–ø–µ—Ä—å —á–∞—Ç –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /close_chat";
                telegramBotService.sendMessageAsync(session.getUser1Id(), completionMessage);
                telegramBotService.sendMessageAsync(session.getUser2Id(), completionMessage);

                log.info("Both users confirmed completion for session {}", sessionId);
                return true;
            } else {
                Long otherUserId = session.getOtherUserId(userId);
                String userTempId = session.getUserTempId(userId);

                String waitingMessage = "‚úÖ " + userTempId + " –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π. " +
                        "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n\n" +
                        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ —á–∞—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç—å.";

                telegramBotService.sendMessageAsync(otherUserId, waitingMessage);
                telegramBotService.sendMessageAsync(userId,
                        "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.");

                log.info("Completion confirmation received for session {}, waiting for second user", sessionId);
                return true;
            }

        } catch (Exception e) {
            log.error("Error processing completion confirmation for session {} by user {}: {}",
                    sessionId, userId, e.getMessage(), e);
            return false;
        }
    }

    public boolean initiateCloseChat(String sessionId, Long userId) {
        log.info("Initiating chat close for session {} by user {}", sessionId, userId);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!isUserInSession(session, userId)) {
                throw new RuntimeException("User is not a participant of this session");
            }

            if (session.getPaid()) {
                if (session.getCompletionApprovals() == null || session.getCompletionApprovals().size() < 2) {
                    String errorMessage = "‚ùå –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏.\n\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm_completion –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n" +
                            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: " +
                            (session.getCompletionApprovals() != null ? session.getCompletionApprovals().size() : 0) + "/2";
                    telegramBotService.sendMessageAsync(userId, errorMessage);
                    return false;
                }
            }

            if (session.getCloseApprovals() == null) {
                session.setCloseApprovals(new HashSet<>());
            }

            if (!session.getCloseApprovals().contains(userId)) {
                session.getCloseApprovals().add(userId);
            }

            chatSessionRepository.save(session);

            Long otherUserId = session.getOtherUserId(userId);
            String userTempId = session.getUserTempId(userId);

            String notificationMessage = "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userTempId +
                    " –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç.\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /approve_close";

            telegramBotService.sendMessageAsync(otherUserId, notificationMessage);

            telegramBotService.sendMessageAsync(userId,
                    "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.");

            log.info("Close chat initiated successfully for session {}", sessionId);
            return true;

        } catch (Exception e) {
            log.error("Error initiating chat close for session {} by user {}: {}",
                    sessionId, userId, e.getMessage(), e);
            return false;
        }
    }

    public boolean approveCloseChat(String sessionId, Long userId) {
        log.info("Approving chat close for session {} by user {}", sessionId, userId);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!isUserInSession(session, userId)) {
                throw new RuntimeException("User is not a participant of this session");
            }

            if (session.getPaid()) {
                if (session.getCompletionApprovals() == null || session.getCompletionApprovals().size() < 2) {
                    String errorMessage = "‚ùå –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ–±–µ–∏–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏.\n\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /confirm_completion –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n" +
                            "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: " +
                            (session.getCompletionApprovals() != null ? session.getCompletionApprovals().size() : 0) + "/2";
                    telegramBotService.sendMessageAsync(userId, errorMessage);
                    return false;
                }
            }

            if (session.getCloseApprovals() == null) {
                session.setCloseApprovals(new HashSet<>());
            }

            if (!session.getCloseApprovals().contains(userId)) {
                session.getCloseApprovals().add(userId);
            }

            if (session.getCloseApprovals().size() >= 2) {
                session.setStatus("CLOSED");
                session.setLastActivity(LocalDateTime.now());

                String closeMessage = "‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é.";
                telegramBotService.sendMessageAsync(session.getUser1Id(), closeMessage);
                telegramBotService.sendMessageAsync(session.getUser2Id(), closeMessage);

                removeUserCurrentSession(session.getUser1Id());
                removeUserCurrentSession(session.getUser2Id());

                removeFromUserActiveSessions(session.getUser1Id(), sessionId);
                removeFromUserActiveSessions(session.getUser2Id(), sessionId);

                log.info("Chat session {} closed successfully", sessionId);
            } else {
                Long otherUserId = session.getOtherUserId(userId);
                String userTempId = session.getUserTempId(userId);

                String waitingMessage = "‚úÖ " + userTempId + " –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞. " +
                        "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.";

                telegramBotService.sendMessageAsync(otherUserId, waitingMessage);
                telegramBotService.sendMessageAsync(userId,
                        "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.");

                log.info("Close approval received for session {}, waiting for second user", sessionId);
            }

            chatSessionRepository.save(session);
            return true;

        } catch (Exception e) {
            log.error("Error approving chat close for session {} by user {}: {}",
                    sessionId, userId, e.getMessage(), e);
            return false;
        }
    }

    public String getChatStatus(String sessionId, Long userId) {
        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                return "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
            }

            ChatSession session = sessionOpt.get();
            if (!isUserInSession(session, userId)) {
                return "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞";
            }

            StringBuilder status = new StringBuilder();
            status.append("üìä –°—Ç–∞—Ç—É—Å —á–∞—Ç–∞:\n\n");

            if (session.getPaid()) {
                status.append("üí∞ –û–ø–ª–∞—Ç–∞: ‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n");
                int completions = session.getCompletionApprovals() != null ? session.getCompletionApprovals().size() : 0;
                status.append("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ").append(completions).append("/2\n");

                if (completions < 2) {
                    status.append("\n–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç ");
                    if (completions == 0) {
                        status.append("–æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω");
                    } else {
                        Set<Long> approved = session.getCompletionApprovals();
                        if (approved.contains(session.getUser1Id()) && !approved.contains(session.getUser2Id())) {
                            status.append(session.getUser2TempId());
                        } else if (!approved.contains(session.getUser1Id()) && approved.contains(session.getUser2Id())) {
                            status.append(session.getUser1TempId());
                        }
                    }
                } else {
                    status.append("\n‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ß–∞—Ç –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.");
                }
            } else {
                status.append("üí∞ –û–ø–ª–∞—Ç–∞: ‚ùå –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n");
                status.append("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /confirm_completion —Å–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞.");
            }

            return status.toString();

        } catch (Exception e) {
            log.error("Error getting chat status for session {}: {}", sessionId, e.getMessage());
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞";
        }
    }

    public void switchUserSession(Long userId, String sessionId) {
        log.debug("Switching user {} to session {}", userId, sessionId);

        try {
            Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
            if (sessionOpt.isEmpty()) {
                throw new RuntimeException("Session not found: " + sessionId);
            }

            ChatSession session = sessionOpt.get();

            if (!isUserInSession(session, userId)) {
                throw new RuntimeException("User is not a participant of this session");
            }

            if (!"ACTIVE".equals(session.getStatus())) {
                throw new RuntimeException("Cannot switch to inactive session");
            }

            setUserCurrentSession(userId, sessionId);

            log.info("User {} switched to session {}", userId, sessionId);

        } catch (Exception e) {
            log.error("Error switching user {} to session {}: {}",
                    userId, sessionId, e.getMessage(), e);
            throw new RuntimeException("Failed to switch session: " + e.getMessage());
        }
    }

    public String getUserCurrentSession(Long userId) {
        try {
            String sessionId = (String) redisTemplate.opsForValue().get(USER_CURRENT_SESSION_KEY + userId);
            if (sessionId != null) {
                Optional<ChatSession> session = chatSessionRepository.findById(sessionId);
                if (session.isPresent() && "ACTIVE".equals(session.get().getStatus())) {
                    return sessionId;
                } else {
                    removeUserCurrentSession(userId);
                    return null;
                }
            }
            return null;
        } catch (Exception e) {
            log.error("Error getting current session for user {}: {}", userId, e.getMessage(), e);
            return null;
        }
    }

    public List<ChatSession> getUserActiveSessions(Long userId) {
        try {
            List<Object> sessionIdObjects = redisTemplate.opsForList().range(USER_ACTIVE_SESSIONS_KEY + userId, 0, -1);

            if (sessionIdObjects == null || sessionIdObjects.isEmpty()) {
                return List.of();
            }

            List<String> sessionIds = new ArrayList<>();
            for (Object obj : sessionIdObjects) {
                if (obj instanceof String) {
                    sessionIds.add((String) obj);
                }
            }

            if (sessionIds.isEmpty()) {
                return List.of();
            }

            List<ChatSession> activeSessions = new ArrayList<>();
            for (String sessionId : sessionIds) {
                Optional<ChatSession> sessionOpt = chatSessionRepository.findById(sessionId);
                if (sessionOpt.isPresent() && "ACTIVE".equals(sessionOpt.get().getStatus())) {
                    activeSessions.add(sessionOpt.get());
                }
            }

            return activeSessions;

        } catch (Exception e) {
            log.error("Error getting active sessions for user {}: {}", userId, e.getMessage(), e);
            return List.of();
        }
    }

    public Long getOrderId(String sessionId) {
        Long orderId = null;
        try {
            Optional<ChatSession> session = chatSessionRepository.findById(sessionId);
            if (session.isPresent()) {
                orderId = session.get().getOrderId();
            }
        } catch (Exception e) {
            log.error("Error getting order id for session {}: {}", sessionId, e.getMessage());
        }
        log.debug("Order ID for session {}: {}", sessionId, orderId);
        return orderId;
    }

    public Long getSecondUserId(String sessionId) {
        Long secondUserId = null;
        try {
            Optional<ChatSession> session = chatSessionRepository.findById(sessionId);
            if (session.isPresent()) {
                secondUserId = session.get().getUser2Id();
            }
        } catch (Exception e) {
            log.error("Error getting secondUserId for session {}: {}", sessionId, e.getMessage());
        }
        return secondUserId;
    }

    public Long getFirstUserId(String sessionId) {
        Long firstUserId = null;
        try {
            Optional<ChatSession> session = chatSessionRepository.findById(sessionId);
            if (session.isPresent()) {
                firstUserId = session.get().getUser1Id();
            }
        } catch (Exception e) {
            log.error("Error getting first UserId for session {}: {}", sessionId, e.getMessage());
        }
        return firstUserId;
    }

    private Optional<ChatSession> findActiveSessionBetweenUsers(Long user1Id, Long user2Id, Long orderId) {
        List<ChatSession> user1Sessions = getUserActiveSessions(user1Id);
        return user1Sessions.stream()
                .filter(session -> isUserInSession(session, user2Id) &&
                        orderId.equals(session.getOrderId()))
                .findFirst();
    }

    private boolean isUserInSession(ChatSession session, Long userId) {
        return userId.equals(session.getUser1Id()) || userId.equals(session.getUser2Id());
    }

    private void setUserCurrentSession(Long userId, String sessionId) {
        try {
            redisTemplate.opsForValue().set(
                    USER_CURRENT_SESSION_KEY + userId,
                    sessionId,
                    7, TimeUnit.DAYS
            );
            log.debug("Set current session for user {}: {}", userId, sessionId);
        } catch (Exception e) {
            log.error("Error setting current session for user {}: {}", userId, e.getMessage(), e);
        }
    }

    private void removeUserCurrentSession(Long userId) {
        try {
            redisTemplate.delete(USER_CURRENT_SESSION_KEY + userId);
            log.debug("Removed current session for user {}", userId);
        } catch (Exception e) {
            log.error("Error removing current session for user {}: {}", userId, e.getMessage(), e);
        }
    }

    private void addToUserActiveSessions(Long userId, String sessionId) {
        try {
            String key = USER_ACTIVE_SESSIONS_KEY + userId;

            redisTemplate.opsForList().remove(key, 0, sessionId);

            redisTemplate.opsForList().rightPush(key, sessionId);

            redisTemplate.expire(key, 7, TimeUnit.DAYS);
            log.debug("Added session {} to active sessions for user {}", sessionId, userId);
        } catch (Exception e) {
            log.error("Error adding session to active sessions for user {}: {}", userId, e.getMessage(), e);
        }
    }

    private void removeFromUserActiveSessions(Long userId, String sessionId) {
        try {
            redisTemplate.opsForList().remove(USER_ACTIVE_SESSIONS_KEY + userId, 0, sessionId);
            log.debug("Removed session {} from active sessions for user {}", sessionId, userId);
        } catch (Exception e) {
            log.error("Error removing session from active sessions for user {}: {}", userId, e.getMessage(), e);
        }
    }

    private void sendWelcomeMessages(ChatSession session) {
        try {
            String messageToUser1 = "üéâ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å: " + session.getUser2TempId() +
                    "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n" +
                    "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" +
                    "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n" +
                    "üìé –§–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" +
                    "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" +
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ." +
                    "\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:" +
                    "\n/sessions - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤" +
                    "\n/pay - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞" +
                    "\n/confirm_completion - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)" +
                    "\n/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞" +
                    "\n/close_chat - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç";

            String messageToUser2 = "üéâ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å: " + session.getUser1TempId() +
                    "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å:\n" +
                    "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" +
                    "üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n" +
                    "üìé –§–∞–π–ª—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" +
                    "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" +
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã, –∏ –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ." +
                    "\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:" +
                    "\n/sessions - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤" +
                    "\n/pay - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞" +
                    "\n/confirm_completion - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)" +
                    "\n/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞" +
                    "\n/close_chat - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç";

            telegramBotService.sendMessageAsync(session.getUser1Id(), messageToUser1);
            telegramBotService.sendMessageAsync(session.getUser2Id(), messageToUser2);

            log.info("Welcome messages sent for session {}", session.getSessionId());

        } catch (Exception e) {
            log.error("Error sending welcome messages for session {}: {}",
                    session.getSessionId(), e.getMessage(), e);
        }
    }

    private String generateSessionId() {
        return "session_" + UUID.randomUUID().toString();
    }

    private String generateTempId(String prefix) {
        return prefix + "_" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }
}